name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Check for port conflicts
      run: |
        echo "Checking for port conflicts..."
        netstat -tuln | grep :3101 || echo "Port 3101 is available"
        echo "Available ports around 3101:"
        netstat -tuln | grep :310 || echo "No ports in 310x range in use"
      
    - name: Run tests
      run: |
        echo "Running tests with verbose output..."
        bun test tests --randomize
      env:
        CI: true
      
    - name: Build project
      run: |
        bun run build
        
    - name: Verify build output
      run: |
        echo "Checking build output..."
        ls -la dist/
        echo "Checking main entry point..."
        ls -la dist/index.js dist/index.d.ts || echo "No index files found, checking structure..."
        find dist -name "*.js" -o -name "*.d.ts" | head -10
        
    - name: Create distribution package
      run: |
        mkdir -p dist-package
        # Copy the built dist directory
        cp -r dist dist-package/
        # Copy source files for debugging
        cp -r src dist-package/
        cp package.json dist-package/
        cp README.md dist-package/
        
        # Create a tarball for distribution
        tar -czf poto.tar.gz -C dist-package .
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: poto-${{ github.sha }}
        path: |
          poto.tar.gz
          dist-package/
        retention-days: 30
        
  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: poto-${{ github.sha }}
        path: ./artifacts
        
    - name: Extract and validate semantic version
      run: |
        # Extract the tag name from the ref (e.g., refs/tags/v1.2.3 -> v1.2.3)
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Processing tag: $TAG_NAME"
        
        # Validate semantic version format (v1.2.3, v1.0.0-beta.1, etc.)
        if [[ $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "✅ Valid semantic version: $TAG_NAME"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        else
          echo "❌ Invalid semantic version format: $TAG_NAME"
          echo "Expected format: v1.2.3 or v1.2.3-beta.1"
          exit 1
        fi
        
        # Verify tag matches package.json version
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        PACKAGE_VERSION_WITH_V="v$PACKAGE_VERSION"
        
        if [ "$TAG_NAME" != "$PACKAGE_VERSION_WITH_V" ]; then
          echo "❌ Version mismatch detected!"
          echo "   Git tag: $TAG_NAME"
          echo "   package.json: $PACKAGE_VERSION_WITH_V"
          echo ""
          echo "Please ensure the git tag matches the package.json version."
          echo "You can fix this by:"
          echo "  1. Update package.json: ./scripts/version.sh $TAG_NAME"
          echo "  2. Or create a new tag: git tag -d $TAG_NAME && git push origin :$TAG_NAME"
          echo "     Then: ./scripts/create-release.sh"
          exit 1
        else
          echo "✅ Version sync verified: $TAG_NAME matches package.json"
        fi
        
    - name: Determine release type
      run: |
        # Check if this is a pre-release (contains -alpha, -beta, -rc, etc.)
        if [[ $TAG_NAME =~ -[a-zA-Z0-9.-]+$ ]]; then
          echo "🔖 Pre-release detected: $TAG_NAME"
          echo "IS_PRERELEASE=true" >> $GITHUB_ENV
        else
          echo "🚀 Full release detected: $TAG_NAME"
          echo "IS_PRERELEASE=false" >> $GITHUB_ENV
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        files: |
          artifacts/poto.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
